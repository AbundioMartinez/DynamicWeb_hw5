1. What IS form validation?Form validation occurs in the server when a user or client the information the required data in the format that is correct. Then, the user or client presses the bottom to send the information that is required for this format. form validation is when you fill out a form on a website and and are provided with feedback regarding the data that you have entered in the various form inputs.2. What are the two types of client-side form validation?The two types of client-side form validation is HTML5 Form Controls is the ability to validate most user data without JavaScript. the second is constraint validation API, but with this form you have to use Javascript. There are two types of client side validation. One is using html5 built in form validation as has been already discussed, and involves NO JavaScript. The other DOES use JavaScript.3. What exactly is html5 built-in form validation? Describe the one attribute that needs to be added to the form input element in order for built in form validation to work at a minimum? One of the most significant features of HTML5 form controls is the ability to validate most user data without relying on JavaScript. It’s achieved using validation attributes on form elements.  1 example of an attribute that needs to be added to the form input element is the input Boolean attribute. 4. Use the different input elements (username, password, email) we have talked about and demonstrated in class as examples of how to implement html5 built-in form validation. You can and SHOULD take from the form which you have to build for your next project as examples. That’s the idea here. A number of you used code from the Arithmetic Forms to provide examples in answers to the questions for the week 3 homework. That was really excellent! I would like to see the same happen here. <input type="text" name="username" placeholder="createusername" pattern="^(?=.*\d)(?=.*[a-zA-Z]).{7,15}$"required><input type="email" name="mail" placeholder="enter youremail"pattern="(\b[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}\b)"required><input type="password" name="password"placeholder="create a password"pattern="^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])\w{13,24}$"required> 5. What is the main difference between HTML5 form validation and the JavaScript Constraint Validation API? Basically, one uses javascript and the other doesn’t. in this case HTML5 form validation does not us JavaScript while the constraint validation API uses JavaScript.6. What is the input attribute you would NOT want to use when creating a form with the JavaScript Constraint Validation API? The input attribute that we wouldn’t use is the “title attribute ”because it overrides any messages set up via JavaScript using the “.setCustomValidity( )” method. 7. Is client-side form validation enough by itself? Why not? The client-form validation is not enough by itself because theuser inputs are not secure. Security checks can only be done server-side and client side validation is easily manipulated or disabled. The purpose of website security is to prevent users’ information from being leaked or exposed.8. Why would we want to use form validation when at the same time we want them to have the best UX possible on our site? Give three reasons why we would want to use form validation on our users.  It is important that form owners choose the correct data type for each field. Selecting an incorrect data type will not pose a security risk, but it may prevent form users from entering legitimate data.header injection attacks can be used to send email spam from your web serverWe want to use form validation at the same time to have the best UX on our site because as well . We want to get all the client’s data in the right format. we want to protect all the users’ data by forcing the users to input secure passwords, which helps protect the information they have shared with us. we want to protect ourselves from malicious hackers. 9. What is one of the most significant features of HTML5 form controls? How is this achieved?  Cleaner and more Improved Code. ...Better Semantics. ...Enhanced Uniformity. ...Mutuality. ...Well-Designed Forms. ...Ensures Better Accessibility. ...Better Offline Browsing. The most important is that we don’t to add javascript and this is achieved by using validation attributes on form elements. 10. List seven attributes used in built-in form validation, and describe what they do. ? Seven attributes used in a built-in form validation are 1. requiredThe required attribute doesn’t need much introduction; like autofocus, it does exactly what you’d expect. By adding it to a form field, the browser requires the user to enter data into that field before submitting the form. This replaces the basic form validation currently implemented with JavaScript, making things a little more usable and saving us a little more development time. required is a Boolean attribute, like autofocus. Let’s see it in action.2. patternThe pattern attribute is likely to get a lot of developers very excited (well, as excited as you can get about form attributes). It specifies a JavaScript regular expression for the field’s value to be checked against. pattern makes it easy for us to implement specific validation for product codes, invoice numbers, and so on. The possibilities for pattern are wide-ranging, and this is just one simple example using a product number.3. autofocusautofocus does exactly what it says on the tin. Adding it to an input automatically focuses that field when the page is rendered. As with placeholder, autofocus is something that we used JavaScript for in the past.4.multipleWe can take our lists and datalists one step further by applying the Boolean attribute multiple to allow more than one value to be entered from the datalist. Here is an example.5. formThe form attribute is used to associate an input, select, or textarea element with a form (known as its form owner). Using form means that the element doesn’t need to be a child of the associated form and can be moved away from it in the source. The primary use case for this is that input buttons that are placed within tables can now be associated with a form.6.list and the datalist elementThe list attribute enables the user to associate a list of options with a particular field. The value of the list attribute must be the same as the ID of a datalist element that resides in the same document. The datalist element is new in HTML5 and represents a predefined list of options for form controls. It works in a similar way to the in-browser search boxes that autocomplete as you type 7.autocompleteThe autocomplete attribute helps users complete forms based on earlier input. The attribute has been around since IE5.5 but has finally been standardized as part of HTML5. The default state is set to on. This means that generally we won’t have to use it. 